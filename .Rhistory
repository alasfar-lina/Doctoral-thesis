scale_alpha_discrete(range=c(0.2,1,0.2,1),guide=FALSE)+
geom_text_repel(data=subset(dfvolc,(abs(log2FoldChange) > 3 & -log10(padj)>8)|(-log10(padj)>9) |(abs(log2FoldChange) > 5 & -log10(padj)>2)), aes(label=genes),
nudge_x = .15,
box.padding = 0.5,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20
)+
labs(subtitle="Volcano plot",
y="Log10 p-value (FDR adj.)",
x="Log2 Fold change ",
title="Bulk RNA-seq ",
caption="*_FDR corrected p < 0.01_*"
)+
theme(
panel.grid.minor=element_blank(),
)
ggplot(dfvolc, aes(x=log2FoldChange, y=-log10(padj),label=genes))  + md_theme_minimal()  +
geom_point(aes(colour=interaction(pvalue<0.01,abs(log2FoldChange)>2) ,alpha =interaction(pvalue<0.01,abs(log2FoldChange)>2)) )+   # draw points
scale_colour_manual(name = 'FDR corr. pval < 0.1', values = c('grey','#5871b6','grey','#56aeac'),guide=FALSE) +
scale_alpha_discrete(range=c(0.2,1,0.2,1),guide=FALSE)+
geom_text_repel(data=subset(dfvolc,(abs(log2FoldChange) > 3 & -log10(padj)>8)|(-log10(padj)>9) |(abs(log2FoldChange) > 5 & -log10(padj)>1)), aes(label=genes),
nudge_x = .15,
box.padding = 0.5,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20
)+
labs(subtitle="Volcano plot",
y="Log10 p-value (FDR adj.)",
x="Log2 Fold change ",
title="Bulk RNA-seq ",
caption="*_FDR corrected p < 0.01_*"
)+
theme(
panel.grid.minor=element_blank(),
)
ggplot(dfvolc, aes(x=log2FoldChange, y=-log10(padj),label=genes))  + md_theme_minimal()  +
geom_point(aes(colour=interaction(pvalue<0.01,abs(log2FoldChange)>2) ,alpha =interaction(pvalue<0.01,abs(log2FoldChange)>2)) )+   # draw points
scale_colour_manual(name = 'FDR corr. pval < 0.1', values = c('grey','#5871b6','grey','#56aeac'),guide=FALSE) +
scale_alpha_discrete(range=c(0.2,1,0.2,1),guide=FALSE)+
geom_text_repel(data=subset(dfvolc,(abs(log2FoldChange) > 3 & -log10(padj)>8)|(-log10(padj)>9) |(abs(log2FoldChange) > 5 & -log10(padj)>1)), aes(label=genes),
nudge_x = .15,
box.padding = 0.5,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20,
size          = 5,
)+
labs(subtitle="Volcano plot",
y="Log10 p-value (FDR adj.)",
x="Log2 Fold change ",
title="Bulk RNA-seq ",
caption="*_FDR corrected p < 0.01_*"
)+
theme(
panel.grid.minor=element_blank(),
)
ggplot(dfvolc, aes(x=log2FoldChange, y=-log10(padj),label=genes))  + md_theme_minimal()  +
geom_point(aes(colour=interaction(pvalue<0.01,abs(log2FoldChange)>2) ,alpha =interaction(pvalue<0.01,abs(log2FoldChange)>2)) )+   # draw points
scale_colour_manual(name = 'FDR corr. pval < 0.1', values = c('grey','#5871b6','grey','#56aeac'),guide=FALSE) +
scale_alpha_discrete(range=c(0.2,1,0.2,1),guide=FALSE)+
geom_text_repel(data=subset(dfvolc,(abs(log2FoldChange) > 3 & -log10(padj)>8)|(-log10(padj)>9) |(abs(log2FoldChange) > 5 & -log10(padj)>1)), aes(label=genes),
nudge_x = .15,
box.padding = 0.5,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20,
size          = 2,
)+
labs(subtitle="Volcano plot",
y="Log10 p-value (FDR adj.)",
x="Log2 Fold change ",
title="Bulk RNA-seq ",
caption="*_FDR corrected p < 0.01_*"
)+
theme(
panel.grid.minor=element_blank(),
)
ggplot(dfvolc, aes(x=log2FoldChange, y=-log10(padj),label=genes))  + md_theme_minimal()  +
geom_point(aes(colour=interaction(pvalue<0.01,abs(log2FoldChange)>2) ,alpha =interaction(pvalue<0.01,abs(log2FoldChange)>2)) )+   # draw points
scale_colour_manual(name = 'FDR corr. pval < 0.1', values = c('grey','#5871b6','grey','#56aeac'),guide=FALSE) +
scale_alpha_discrete(range=c(0.2,1,0.2,1),guide=FALSE)+
geom_text_repel(data=subset(dfvolc,(abs(log2FoldChange) > 3 & -log10(padj)>8)|(-log10(padj)>9) |(abs(log2FoldChange) > 5 & -log10(padj)>1)), aes(label=genes),
nudge_x = .15,
box.padding = 0.5,
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20,
size          = 2.5,
)+
labs(subtitle="Volcano plot",
y="Log10 p-value (FDR adj.)",
x="Log2 Fold change ",
title="Bulk RNA-seq ",
caption="*_FDR corrected p < 0.01_*"
)+
theme(
panel.grid.minor=element_blank(),
)
source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
source("http://bioconductor.org/biocLite.R")
install_phyloseq(branch = "github")
source("https://raw.githubusercontent.com/joey711/phyloseq/master/inst/scripts/installer.R",
local = TRUE)
install_phyloseq(branch = "github")
install.packages("ragg")
install.packages('ggraph')
install.packages('igraph')
library(ggraph)
library(igraph)
library(igraph)
setwd("/Users/lina/Dropbox/My_Doctoral_thesis/R-files")
## create a node table
tbl_vertices <- read.csv("nodes.csv", na.string = "NA")
tbl_edges
## create a node table
tbl_vertices <- read.csv("nodes.csv", na.string = "NA")
tbl_edges <- read.csv("vertices.csv", na.string = "NA")
## create a node table
tbl_vertices <- read.csv("nodes.csv", na.string = "NA")
tbl_edges <- read.csv("vertices.csv", na.string = "NA")
tbl_edges
tbl_edges <- read.csv("edges.csv", na.string = "NA")
## create a node table
tbl_vertices <- read.csv("nodes.csv", na.string = "NA")
tbl_edges <- read.csv("edges.csv", na.string = "NA")
graph <- graph_from_data_frame(tbl_edges, tbl_vertices, directed = TRUE)
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette="Set2") +
guides(fill = FALSE) +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
# geom_node_label(aes(label=node, fill= type),
#                col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette="Set2") +
guides(fill = FALSE) +
theme_void() +
coord_flip()
tbl_vertices$node
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette="Set2") +
guides(fill = FALSE) +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette="Set2") +
guides(fill = FALSE) +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette="Set3") +
guides(fill = FALSE) +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette="Set3") +
guides(fill = FALSE) +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette="Set3") +
guides(fill = "none") +
theme_void() +
coord_flip()
devtools::install_github("mtennekes/cols4all")
library(cols4all)
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette=c4a("kelly", 7)) +
guides(fill = "none") +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_manual(palette=c4a("kelly", 7)) +
guides(fill = "none") +
theme_void() +
coord_flip()
c4a("kelly", 7)
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_manual(c4a("kelly", 7)) +
guides(fill = "none") +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_manual(c4a("hcl.purple_green", 11)) +
guides(fill = "none") +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_binned(palette=c4a("kelly", 7)) +
guides(fill = "none") +
theme_void() +
coord_flip()
?scale_color_continuous_c4a_div()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_discrete_c4a_cat("kelly") +
guides(fill = "none") +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette='Set1') +
guides(fill = "none") +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette='Set1') +
guides(fill = "none") +
theme_void() +
coord_flip()
library(ggraph)
library(igraph)
library(cols4all)
setwd("/Users/lina/Dropbox/My_Doctoral_thesis/R-files")
## create a node table
tbl_vertices <- read.csv("nodes.csv", na.string = "NA")
tbl_edges <- read.csv("edges.csv", na.string = "NA")
graph <- graph_from_data_frame(tbl_edges, tbl_vertices, directed = TRUE)
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette='Set1') +
guides(fill = "none") +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=node, fill= type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette='Set1') +
guides(fill = "none") +
theme_void() +
coord_flip()
graph
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= tbl_vertices$type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette='Set1') +
guides(fill = "none") +
theme_void() +
coord_flip()
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= tbl_vertices$type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette='Set1') +
guides(fill = "none") +
theme_void() +
coord_flip()
## create a node table
tbl_vertices <- read.csv("nodes.csv", na.string = "NA")
tbl_edges <- read.csv("edges.csv", na.string = "NA")
graph <- graph_from_data_frame(tbl_edges, tbl_vertices, directed = TRUE)
ggraph(graph, layout = 'igraph', algorithm = 'tree') +
geom_edge_diagonal(edge_width = 0.5, alpha =.4) +
geom_node_label(aes(label=tbl_vertices$node, fill= tbl_vertices$type),
col = "white", fontface = "bold", hjust = "inward") +
scale_color_brewer(palette='Set1') +
guides(fill = "none") +
theme_void() +
coord_flip()
?agg
library(ggalt)
library(MAd)
?agg
library(tidyr)
library(purrr)
library(MAd)
library(ggplot2)
library(latex2exp)
library(ggalt)
library(tidyverse)
data = data.frame(
'Exp'=c('ATLAS','CMS','ATLAS','CMS','ATLAS','CMS','ATLAS','CMS','ATLAS','CMS','ATLAS','CMS','ATLAS','CMS','ATLAS','CMS'),
'id'= c('ka','ka','kg','kg','kz','kz','kw','kw','kt','kt','kb','kb','kta','kta','kmu','kmu'),
'k'=c( 1.04,0.895, 0.92,1.165,0.99,0.96,1.06,1.225,0.92,1.01,0.87,0.95,0.92,0.94,1.07,0.21 ),
'std'= c(0.06,0.115, 0.065,0.115, 0.06,0.07,0.06,0.115,0.10,0.11,0.11,0.23, 0.07,0.12,0.275,0.71) )
data2 <- data %>% group_by(Exp) %>% nest()
View(data2)
View(data2)
View(data2[[2]][[1]])
View(data2[[2]][[2]])
0.11*1.6
aggrivated<- MAd::agg(id=id, es=k, var=std, method = "BHHR", cor = 0.5,  mod=NULL, data=data)
aggrivated
0.078*1.6
library(ggplot2)
library(plyr);
library(dplyr)
library(tidyr)
library(splitstackshape)
options(kableExtra.latex.load_packages = TRUE)
library(kableExtra)
library(lmtest)
library(jtools) # for summ()
library(lme4)
library(caret)
library(lmerTest)
library(coin)
library(mdthemes)
library(ggpubr)
library(ggrepel)
library(latex2exp)
library(igraph)
setwd("/Users/lina/Dropbox/Doctoral-thesis")
netz<- read.csv(file="./R-files/network.csv")
head(netz)
op <- options(warn = (-1)) # suppress warnings
spr0=c()
spr1=c()
pvalstat1=c()
pvalstat11=c()
pval0=c()
pval1=c()
ts=c()
netzX <- netz
View(netzX)
netzX <- netz
netzX$chn <- NULL
str1 <-  netzX%>% filter(.,ch==0)
srt2 <-  netzX%>% filter(.,ch==1)
ch1vsch2<- subset(netzX, ch==0|ch==1)
netzY <- netzX
netzY$ch <- NULL
featnames <-  netzY%>% colnames()
featpairs <- c()
for (i in seq(from=1,to=length(featnames)-1)) {
for (j in seq(from=i+1,to=length(featnames)) ) {
m1 <- lm((eval(parse(text = featnames[i]))) ~ (eval(parse(text = featnames[j])))+ (eval(parse(text = featnames[j]))): ch , data = ch1vsch2)
m0 <- lm((eval(parse(text = featnames[i]))) ~ (eval(parse(text = featnames[j]))) , data = ch1vsch2)
m11 <- lm((eval(parse(text = featnames[j]))) ~ (eval(parse(text = featnames[i])))+ (eval(parse(text = featnames[i]))): ch , data = ch1vsch2)
m00 <- lm((eval(parse(text = featnames[j]))) ~ (eval(parse(text = featnames[i]))) , data = ch1vsch2)
l<-lmtest::lrtest(m1, m0)
l1<-lmtest::lrtest(m11, m00)
print((summ(m1)),confint = TRUE, pvals = TRUE)
tst<-cor.test( str1[,featnames[i]] , str1[,featnames[j]], method= "pearson")
tst1<-cor.test( srt2[,featnames[i]] , srt2[,featnames[j]], method= "pearson")
print(tst)
spr0 <- c(spr0, tst$estimate)
spr1 <- c(spr1, tst1$estimate)
pval0 <- c(pval0, tst$p.value)
pval1 <- c(pval1, tst1$p.value)
pvalstat1<-c(pvalstat1,l$P[2])
pvalstat11<-c(pvalstat11,l1$P[2])
featpairs<- c(featpairs,paste(featnames[i],featnames[j],sep='&'))
}
}
q1<-p.adjust(pval0, method ='fdr', n = length(pval0)) ## should be done after the test
q2<-p.adjust(pval1, method ='fdr', n = length(pval1))
df = data_frame(corr1=spr0,corr2=spr1,qval1=q1,qval2=q2,anovp=pvalstat1, names=featpairs)
dff <- subset(df,replace_na((qval1<0.001 &qval2 <0.01 & anovp< 0.01), FALSE))
ggplot(df, aes(x=corr1, y=corr2, colour = replace_na((qval1<0.01 &qval2 <0.01 & anovp< 0.01), FALSE),labels=names ))  +  theme_bw()  +
geom_point(size= 3,aes(alpha= replace_na((qval1<0.01 &qval2 <0.01 & anovp< 0.01), FALSE)))+   # draw points
scale_colour_manual(name = 'FDR corr. pval < 0.01', values = setNames(c('grey','#b5838d'),c(FALSE, TRUE)),guide=FALSE) +
scale_alpha_discrete(range=c(0.6,0.9,0.9),guide=FALSE)+
geom_vline(xintercept = 0,colour='grey')+
geom_hline(yintercept = 0,colour='grey')+
geom_text_repel(data=dff, aes(label=names),
#nudge_x = .15,
box.padding = 0.5,
#nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20,
size          = 4.15,
)+
labs(subtitle="",
y=TeX("Pearson $\\rho$ $u\\bar{u}\\to hh$"),
x=TeX("Pearson $\\rho$ $gg\\to hh$ (SM)"),
# title="*_Enterobacteriaceae_* (family) ",
#caption="Bootsrapping & permutation tests & FDR corrected p < 0.05 "
)+
annotate("text", x = 0.05, y=0.75, label = "FDR corr p<0.01")+
theme(
#plot.title = element_text(hjust=0.5, face="bold"),
#   plot.background=element_rect(fill="#f7f7f7"),
#  panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
# panel.grid.major.y=element_blank(),
#panel.grid.major.x=element_line(),s
#  axis.ticks=element_blank(),
# legend.position="top",
# panel.border=element_blank()
)
netz<- read.csv(file="./R-files/network.csv")
head(netz)
op <- options(warn = (-1)) # suppress warnings
spr0=c()
spr1=c()
pvalstat1=c()
pvalstat11=c()
pval0=c()
pval1=c()
ts=c()
netzX <- netz
netzX$chn <- NULL
str1 <-  netzX%>% filter(.,ch==0)
srt2 <-  netzX%>% filter(.,ch==3)
ch1vsch2<- subset(netzX, ch==0|ch==3)
netzY <- netzX
netzY$ch <- NULL
featnames <-  netzY%>% colnames()
featpairs <- c()
for (i in seq(from=1,to=length(featnames)-1)) {
for (j in seq(from=i+1,to=length(featnames)) ) {
m1 <- lm((eval(parse(text = featnames[i]))) ~ (eval(parse(text = featnames[j])))+ (eval(parse(text = featnames[j]))): ch , data = ch1vsch2)
m0 <- lm((eval(parse(text = featnames[i]))) ~ (eval(parse(text = featnames[j]))) , data = ch1vsch2)
m11 <- lm((eval(parse(text = featnames[j]))) ~ (eval(parse(text = featnames[i])))+ (eval(parse(text = featnames[i]))): ch , data = ch1vsch2)
m00 <- lm((eval(parse(text = featnames[j]))) ~ (eval(parse(text = featnames[i]))) , data = ch1vsch2)
l<-lmtest::lrtest(m1, m0)
l1<-lmtest::lrtest(m11, m00)
print((summ(m1)),confint = TRUE, pvals = TRUE)
tst<-cor.test( str1[,featnames[i]] , str1[,featnames[j]], method= "pearson")
tst1<-cor.test( srt2[,featnames[i]] , srt2[,featnames[j]], method= "pearson")
print(tst)
spr0 <- c(spr0, tst$estimate)
spr1 <- c(spr1, tst1$estimate)
pval0 <- c(pval0, tst$p.value)
pval1 <- c(pval1, tst1$p.value)
pvalstat1<-c(pvalstat1,l$P[2])
pvalstat11<-c(pvalstat11,l1$P[2])
featpairs<- c(featpairs,paste(featnames[i],featnames[j],sep='&'))
}
}
q1<-p.adjust(pval0, method ='fdr', n = length(pval0)) ## should be done after the test
q2<-p.adjust(pval1, method ='fdr', n = length(pval1))
df = data_frame(corr1=spr0,corr2=spr1,qval1=q1,qval2=q2,anovp=pvalstat1, names=featpairs)
dff <- subset(df,replace_na((qval1<0.001 &qval2 <0.01 & anovp< 0.01), FALSE))
ggplot(df, aes(x=corr1, y=corr2, colour = replace_na((qval1<0.01 &qval2 <0.01 & anovp< 0.01), FALSE),labels=names ))  +  theme_bw()  +
geom_point(size= 3,aes(alpha= replace_na((qval1<0.01 &qval2 <0.01 & anovp< 0.01), FALSE)))+   # draw points
scale_colour_manual(name = 'FDR corr. pval < 0.01', values = setNames(c('grey','#b5838d'),c(FALSE, TRUE)),guide=FALSE) +
scale_alpha_discrete(range=c(0.6,0.9,0.9),guide=FALSE)+
geom_vline(xintercept = 0,colour='grey')+
geom_hline(yintercept = 0,colour='grey')+
geom_text_repel(data=dff, aes(label=names),
#nudge_x = .15,
box.padding = 0.5,
#nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20,
size          = 4.15,
)+
labs(subtitle="",
y=TeX("Pearson $\\rho$ bkg."),
x=TeX("Pearson $\\rho$ $gg\\to hh$ (SM)"),
# title="*_Enterobacteriaceae_* (family) ",
#caption="Bootsrapping & permutation tests & FDR corrected p < 0.05 "
)+
annotate("text", x = 0.05, y=0.75, label = "FDR corr p<0.01")+
theme(
#plot.title = element_text(hjust=0.5, face="bold"),
#   plot.background=element_rect(fill="#f7f7f7"),
#  panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
# panel.grid.major.y=element_blank(),
#panel.grid.major.x=element_line(),s
#  axis.ticks=element_blank(),
# legend.position="top",
# panel.border=element_blank()
)
