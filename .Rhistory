from icalendar import Calendar, Event, vCalAddress, vText
import pytz
from datetime import datetime
import os
from pathlib import Path
#"Schwanitz, Georg" <georg.schwanitz@charite.de>
attendee_list = ['Sofia.Forslund@mdc-berlin.de','mkelm@dhzb.de', 'georg.schwanitz@charite.de']
cal = Calendar()
cal.add('attendee', 'MAILTO:Sofia.Forslund@mdc-berlin.de')
cal.add('attendee', 'MAILTO:mkelm@dhzb.de')
event = Event()
event.add('summary', 'First meeting to establish data management team ')
event.add('url', 'https://hu-berlin.zoom.us/j/7660007939')
event.add('dtstart', datetime(2022, 3, 9, 14, 0, 0, tzinfo=pytz.timezone('Europe/Berlin')))
event.add('dtend', datetime(2022, 3, 9, 15, 0, 0, tzinfo=pytz.timezone('Europe/Berlin')))
event.add('dtstamp', datetime(2022, 3, 2, 0, 10, 0, tzinfo=pytz.timezone('Europe/Berlin'))) # date created
organizer = vCalAddress('MAILTO:lina.alasfar@hu-berlin.de')
organizer.params['cn'] = vText('Lina Alasfar')
organizer.params['role'] = vText('Postdoc/Data Steward')
event['organizer'] = organizer
event['location'] = vText('Berlin, DE')
# Adding events to calendar
cal.add_component(event)
#directory = str(Path(__file__).parent.parent) + "/"
#print("ics file will be generated at ", directory)
f = open(os.path.join('/Users/lina/Desktop/', 'First_meeting.ics'), 'wb')
f.write(cal.to_ical())
f.close()
# in R
library(devtools)
install_github("TillBirkner/metadeconfoundR")
library(metadeconfoundR)
?metadeconfoundR
?vignettes
vignette(package = "metadeconfoundR")
install.packages('igraph')
setwd("/Users/lina/Dropbox/Doctoral-thesis")
library(igraph)
demo(package="igraph")
?cor
gr <- cor(str1,str1)
library(ggplot2)
library(plyr);
library(dplyr)
library(tidyr)
library(splitstackshape)
options(kableExtra.latex.load_packages = TRUE)
library(kableExtra)
library(lmtest)
library(jtools) # for summ()
library(lme4)
library(caret)
library(lmerTest)
library(coin)
library(mdthemes)
library(ggpubr)
library(ggrepel)
library(latex2exp)
library(igraph)
setwd("/Users/lina/Dropbox/Doctoral-thesis")
netz<- read.csv(file="./R-files/network.csv")
head(netz)
op <- options(warn = (-1)) # suppress warnings
spr0=c()
spr1=c()
pvalstat1=c()
pvalstat11=c()
pval0=c()
pval1=c()
ts=c()
netzX <- netz
netzX$chn <- NULL
str1 <-  netzX%>% filter(.,ch==2)
srt2 <-  netzX%>% filter(.,ch==1)
ch1vsch2<- subset(netzX, ch==2|ch==1)
netzY <- netzX
netzY$ch <- NULL
featnames <-  netzY%>% colnames()
featpairs <- c()
gr <- cor(str1,str1)
gr
gr <- cor(str1,str1) %>% as.matrix()
gr
g<- graph_from_adjacency_matrix(gr)
f
g
plot(g)
gr <- cor(str1,str1) %>% as.matrix()
diag(gr)<-0
graph<-graph.adjacency(gr,weighted=TRUE,mode="lower")
plot(graph)
degree_distribution(graph)
?graph.adjacency
deg.dist <- degree_distribution(graph, cumulative=T, mode="all") plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",
xlab="Degree", ylab="Cumulative Frequency")
deg.dist <- degree_distribution(graph, cumulative=T, mode="all") plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",
xlab="Degree", ylab="Cumulative Frequency")
deg <- degree(graph, mode="all")
deg.dist <- degree_distribution(graph, cumulative=T, mode="all") plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",
xlab="Degree", ylab="Cumulative Frequency")
deg.dist <- degree_distribution(graph, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",
xlab="Degree", ylab="Cumulative Frequency")
deg <- degree(graph, mode="all")
deg.dist <- degree_distribution(graph, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",
xlab="Degree", ylab="Cumulative Frequency")
deg.dist <- degree_distribution(graph, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
gr <- cor(str1,str1) %>% as.matrix()
diag(gr)<-0
ceb <- cluster_edge_betweenness(graph)
g=delete.edges(graph, which(E(graph)$weight <=.1)) # here's my condition.
plot(g)
g=delete.edges(graph, which(E(graph)$weight <=.6)) # here's my condition.
plot(g)
deg <- degree(g, mode="all")
deg.dist <- degree_distribution(g, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
ceb <- cluster_edge_betweenness(g)
dendPlot(ceb, mode="hclust")
plot(ceb, g)
membership(ceb) # community membership for each node
ceb <- cluster_edge_betweenness(g)
dendPlot(ceb, mode="hclust")
plot(ceb, g)
?cor
str1$ch <- NULL
gr <- cor(str1,str1) %>% as.matrix()
diag(gr)<-0
graph<-graph.adjacency(gr,weighted=TRUE,mode="lower")
g=delete.edges(graph, which(E(graph)$weight <=.6)) # here's my condition.
plot(g)
deg <- degree(g, mode="all")
deg.dist <- degree_distribution(g, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
ceb <- cluster_edge_betweenness(g)
dendPlot(ceb, mode="hclust")
plot(ceb, g)
gr <- cor(str1,str1) %>% as.matrix()
diag(gr)<-0
graph<-graph.adjacency(gr,weighted=TRUE,mode="lower")
g=delete.edges(graph, which(E(graph)$weight <=.4)) # here's my condition.
plot(g)
deg <- degree(g, mode="all")
deg.dist <- degree_distribution(g, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
ceb <- cluster_edge_betweenness(g)
dendPlot(ceb, mode="hclust")
plot(ceb, g)
hs <- hub_score(g, weights=NA)$vector
as <- authority_score(g, weights=NA)$vector
par(mfrow=c(1,2))
plot(g, vertex.size=hs*50, main="Hubs")
plot(g, vertex.size=as*30, main="Authorities")
plor(log10(deg),log10(deg.dist))
plot(log10(deg),log10(deg.dist))
deg <- degree(g, mode="all")
deg.dist <- degree_distribution(g, cumulative=F, mode="all")
plot(log10(deg),log10(deg.dist))
ged
deg
deg.dist
plot(log10(x=1:max(deg)+1),log10(deg.dist))
plot(log10(x=1:max(deg)+1),y=log10(deg.dist))
plot( x=log10(0:max(deg)), y=log10(deg.dist), pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
plot( x=log10(0:max(deg)), y=log10(deg.dist), pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
ceb <- cluster_edge_betweenness(g)
plot( x=log10(0:max(deg)), y=log10(deg.dist), pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
plot( x=log10(0:max(deg)), y=log10(deg.dist), pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
plot( x=log10(0:max(deg)), y=log10(deg.dist), pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
g=delete.edges(graph, which(E(graph)$weight <=.5)) # here's my condition.
plot(g)
deg <- degree(g, mode="all")
deg.dist <- degree_distribution(g, cumulative=F, mode="all")
plot( x=log10(0:max(deg)), y=log10(deg.dist), pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
plot(g)
